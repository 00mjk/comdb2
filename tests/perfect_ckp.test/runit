#!/bin/sh
#
# Simple test to verify perfect checkpoint.
#
# Perfect checkpoint only flushes dirty pages whose first_dirty_lsn
# is to the left of the checkpoint LSN. The test simulates the
# scenario where the database is taking a checkpoint while there
# are active writers. Pages that are modified first time after 
# the checkpoint LSN is determined need not be written. We verify
# that we did skip such pages by looking at `st_ckp_pages_skip` from
# `bdb cachestat`. We then sigterm the database and bring it up
# to verify recovery.

bash -n "$0" | exit 1

which bc
if [ $? -ne 0 ]; then
    echo "Could not find bc." >&2
    exit 1
fi

dbnm=$1
tier=$2
pgrep -a comdb2
pid=`pgrep -a comdb2 | grep $dbnm | cut -d' ' -f1`
proc=`pgrep -a comdb2 | grep $dbnm | cut -d' ' -f2-`

if [ "$tier" = "" ]; then
    tier='default'
fi

echo Creating table
cdb2sql ${CDB2_OPTIONS} $dbnm $tier "drop table t" >/dev/null
cdb2sql ${CDB2_OPTIONS} $dbnm $tier "create table t { tag ondisk {int i} }" >/dev/null

echo Inserting 10k records
i=0
while [ $i -lt 10000 ] ; do
    echo "INSERT INTO t VALUES(99999999)"
    i=$((i + 1))
done >>/dev/stdout | cdb2sql ${CDB2_OPTIONS} $dbnm $tier - >/dev/null

echo Creating 4 random updating background threads
loop=0
bgids=''
while [ $loop -lt 4 ]; do
    yes "UPDATE t SET i = $loop limit $loop * 2500, 2500" | cdb2sql ${CDB2_OPTIONS} $dbnm $tier - >/dev/null 2>&1 &
    bgids="${bgids}$! "
    loop=$((loop + 1))
done


echo Testing perfect checkpoint on master node

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm $tier 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | awk '{print $1}' | cut -d':' -f1`

if [ -z "$master" ]; then
    echo 'Could not determine master' >&2
    exit 1
fi
echo "MASTER is $master"

loop=0
success=0
gbl_before=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages | cut -d' ' -f2`
gbl_sync_before=`echo "$gbl_before" | head -1`
gbl_skip_before=`echo "$gbl_before" | tail -1`
while [ $loop -lt 20 ]; do
    before=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages | cut -d' ' -f2`
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("flush")'
    after=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm $tier 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages | cut -d' ' -f2`

    sync_before=`echo "$before" | head -1`
    skip_before=`echo "$before" | tail -1`
    sync_after=`echo "$after" | head -1`
    skip_after=`echo "$after" | tail -1`

    if [ $skip_after -gt $skip_before ]; then
        success=$((success + 1))
    fi

    loop=$((loop + 1))
    sync_delta=$((sync_after - sync_before))
    skip_delta=$((skip_after - skip_before))
    tot_delta=$((sync_delta + skip_delta))
    skip_ratio=0

    if [ $tot_delta -ne 0 ]; then
        skip_ratio=`echo "$skip_delta/$tot_delta*100" | bc -l`
    fi

    echo "$loop: I/O optimized by $skip_ratio percent"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm $tier 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages
    sleep 1
done
gbl_after=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm $tier 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages | cut -d' ' -f2`
gbl_sync_after=`echo "$gbl_after" | head -1`
gbl_skip_after=`echo "$gbl_after" | tail -1`

gbl_sync_delta=$((gbl_sync_after - gbl_sync_before))
gbl_skip_delta=$((gbl_skip_after - gbl_skip_before))
gbl_tot_delta=$((gbl_sync_delta + gbl_skip_delta))
gbl_skip_ratio=0

if [ $gbl_tot_delta -ne 0 ]; then
    gbl_skip_ratio=`echo "$gbl_skip_delta/$gbl_tot_delta*100" | bc -l`
fi

echo "!!!!!! I/O optimized by $gbl_skip_ratio percent after $loop runs"

echo Killing all background threads
echo "kill $bgids"
kill -9 $bgids

if [ $success -eq 0 ]; then
    echo 'st_ckp_pages_skip did not increase.' >&2
    echo 'FAILED.' >&2
    exit 1
fi

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm $tier 'exec procedure sys.cmd.send("bdb cachestat")' | grep st_ckp_pages

if [ ! -z "$CLUSTER" ]; then
    echo 'Passed'
    exit 0
fi

echo Killing database
kill -9 $pid

sleep 10

echo Bringing up database

if [ -z "$TESTDIR" ]; then
    `$proc >/tmp/_perfect_ckp.$$ 2>&1` &
else
    `cd $TESTDIR/$dbnm && $proc >/tmp/_perfect_ckp.$$ 2>&1` &
fi

outloop=0
while [ $outloop -lt 20 ]; do
    outloop=$((outloop + 1))
    echo 'Wait till ready'
    grep -c 'I AM READY' /tmp/_perfect_ckp.$$

    if [ $? -eq 0 ]; then
        loop=0
        pid=`pgrep -a comdb2 | grep $dbnm | cut -d' ' -f1`
        while [ $loop -lt 4 ]; do
            n=`cdb2sql ${CDB2_OPTIONS} $dbnm $tier "select * from t where i = $loop" | wc -l`
            if [ $n -ne 2500 ]; then
                echo 'Data mismatch. FAILED.' >&2
                kill -9 $pid
                exit 1
            fi
            loop=$((loop + 1))
        done

        kill -9 $pid
        echo 'Passed.'
        exit 0
    fi
    sleep 10
done
